package sample;

import com.jfoenix.controls.*;
import com.jfoenix.validation.RequiredFieldValidator;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Control;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TextField;

import javax.swing.*;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.EventListener;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.UUID;

public class Controller implements Initializable {

    @FXML
    private Label randomLabel;
    @FXML
    private TextField MINinput;
    @FXML
    private TextField MAXinput;
    @FXML
    JFXButton RUN;
    @FXML
    JFXButton LOAD;
    @FXML
    JFXButton createDB;
    @FXML
    JFXButton deleteDB;
    @FXML
    JFXListView randomListView;

    final String DB_URL = "jdbc:derby:EmployeeDB;create=true";
    String Number;

// This is the same function that was created in the in class project from another class except this is with in the controller to convert the list view into string so the numbers show up.
    public String toString(){return (this.Number);}
// I did not know how to create a random value between two values and this link helped me a lot to understand how it works. https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java
    public int generate(){
        Random rand = new Random();
        int Maxvalue = Integer.parseInt(MAXinput.getText());
        int Minvalue = Integer.parseInt(MINinput.getText());
        int Number = rand.nextInt((Maxvalue - Minvalue)+ 1) + Minvalue;
        return Number;
    }
//Used the same code from the inclass AWS project just changed to fit my assignment
    public void createTable(String url)
    {
        try{

            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            try
            {
                stmt.execute("CREATE TABLE NUMBERS (" +
                        "RandomNumber CHAR(20))");

                System.out.println("TABLE CREATED");

            }
            catch (Exception ex)
            {
                System.out.println("TABLE ALREADY EXISTS, NOT CREATED");
            }

            stmt.close();
            conn.close();

        }
        catch (Exception ex)
        {
            String msg = ex.getMessage();
            System.out.println(msg);
        }
    }
    //This is also another function that was used from the AWS in-class project as a guideline
    private void deleteTable(String url)
    {
        try{
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            stmt.execute("DROP TABLE NUMBERS");
            stmt.close();
            conn.close();
            System.out.println("TABLE DROPPED");
        }
        catch (Exception ex)
        {
            String msg = ex.getMessage();
            System.out.println("TABLE NOT DROPPED");
            System.out.println(msg);
        }
    }
    /*In this function I created the run where the button connects to the database and runs a sql statement that inserts a random number into the table
    from the generate() function I created. Then also it sets the label for the random number that was generated by creating a sql statemernt that selects
    the generated number just created.
    */
    public void RUN(String url){
        try{

            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            try
            {
                String sql = "INSERT INTO NUMBERS VALUES" +
                        "('" + generate() + "')";
                stmt.execute(sql);

                String sqlStatement = "SELECT RandomNumber FROM NUMBERS";
                ResultSet result = stmt.executeQuery(sqlStatement);

                ObservableList<Controller> dbNumberList2 = FXCollections.observableArrayList();
                while (result.next())
                {
                    Controller randNumber1 = new Controller();
                    randNumber1.Number = result.getString("RandomNumber");
                    dbNumberList2.add(randNumber1);
                    // This linked helped know how to set text from a variable in a label. https://stackoverflow.com/questions/33357295/display-variable-int-in-javafx
                    randomLabel.setText("" +randNumber1);
                }
                //randomLabel.setText("" +this.generate());
            }
            catch (Exception ex)
            {
                System.out.println("DATA INSERT ERROR!");
            }
            stmt.close();
            conn.close();

        }
        catch (Exception ex)
        {
            String msg = ex.getMessage();
            System.out.println(msg);
        }

    }
//This function is refereced from the AWS project also just changed for this assignment
    public void loadTable(String url)
    {
        try{
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            String sqlStatement = "SELECT RandomNumber FROM NUMBERS";
            ResultSet result = stmt.executeQuery(sqlStatement);

            ObservableList<Controller> dbNumberList = FXCollections.observableArrayList();
            while (result.next())
            {
                Controller randNumber1 = new Controller();
                randNumber1.Number = result.getString("RandomNumber");
                dbNumberList.add(randNumber1);

            }
            if(url.equals(DB_URL))
                randomListView.setItems(dbNumberList);
            else
                randomListView.setItems(dbNumberList);

            System.out.println("DATA LOADED");
            stmt.close();
            conn.close();
        }
        catch (Exception ex)
        {
            String msg = ex.getMessage();
            System.out.println("DATA NOT LOADED");
            System.out.println(msg);
        }
    }
// All this does is set the action for the buttons that where created by using a function.
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        createDB.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                createTable(DB_URL);
            }
        });
        deleteDB.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                deleteTable(DB_URL);
            }
        });
        RUN.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                RUN(DB_URL);
            }
        });
        LOAD.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                loadTable(DB_URL);
            }
        });
    }
}
